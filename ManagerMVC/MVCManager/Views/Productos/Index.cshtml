@model List<ProductoModel>
@{
    int paginaActual = ViewBag.PaginaActual;
    int totalPaginas = (int)Math.Round((double)ViewBag.TotalPaginas);
}

<!-- Búsqueda -->
<div class="mb-4 flex">
    <form method="get" class="flex-auto">
        <input type="text" name="busqueda" placeholder="Buscar productos" class="p-2 border rounded" />
        <button type="submit" class="p-2 bg-blue-500 text-white rounded">Buscar</button>
    </form>
</div>
<div id="loadingSpinner" class="hidden fixed top-0 left-0 right-0 bottom-0 bg-black opacity-50 flex items-center justify-center">
  <div class="loader ease-linear rounded-full border-4 border-t-4 border-gray-200 h-12 w-12 mb-4"></div>
</div>
<!-- Tabla -->
<div id="notification" class="hidden bg-green-500 text-white py-2 px-4 fixed top-0 left-0 right-0 text-center">
  Producto guardado con éxito: <span id="productoGuardado"></span>
</div>
<div class="overflow-x-auto">
    <table class="min-w-full bg-white border border-gray-300">
        <thead>
            <tr class="bg-gray-100 text-left">
                <th class="py-2 px-4 border-b">ID</th>
                <th class="py-2 px-4 border-b">Producto</th>
                <th class="py-2 px-4 border-b">Marca</th>
                <th class="py-2 px-4 border-b">Precio</th>
                <th class="py-2 px-4 border-b">Cantidad</th>
                <th class="py-2 px-4 border-b">Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var producto in Model)
            {
                <tr>
                    <td class="py-2 px-4 border-b">@producto.IdProducto</td>
                    <td class="py-2 px-4 border-b">@producto.Producto</td>
                    <td class="py-2 px-4 border-b">@producto.Marca</td>
                    <td class="py-2 px-4 border-b">@producto.Precio</td>
                    <td class="py-2 px-4 border-b">@producto.Cantidad</td>
                    <td class="py-2 px-4 border-b">
                        <button data-id="@producto.IdProducto" class="open-modal text-blue-500 hover:underline">Editar</button> |
                        <a href="@Url.Action("Eliminar", "Productos", new { id = producto.IdProducto })" class="text-red-500 hover:underline">Eliminar</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<!-- Modal -->
<div id="editModal" class="fixed inset-0 flex items-center justify-center p-4 hidden overflow-y-auto">
    <div class="bg-black opacity-50 absolute inset-0"></div>
    <div class="bg-white p-4 rounded-lg w-full md:w-3/4 lg:w-1/2 relative z-10 overflow-y-auto max-h-screen"> 
        <h2 class="text-2xl mb-4">Editar Producto: <span id="modalTitleId"></span></h2>
        <div id="modalContent">
            <form id="editForm" class="flex flex-col md:flex-row flex-wrap -mx-2">
                <!-- Columna 1 -->
                <div class="w-1/2 px-2 mb-4">
                    <label for="producto" class="block text-sm font-medium text-gray-600">Producto</label>
                    <input type="text" id="producto" name="producto" class="mt-1 p-2 w-full border rounded-md">
                </div>
                <div class="w-1/2 px-2 mb-4">
                    <label for="marca" class="block text-sm font-medium text-gray-600">Marca</label>
                    <input type="text" id="marca" name="marca" class="mt-1 p-2 w-full border rounded-md">
                </div>
                <div class="w-1/2 px-2 mb-4">
                    <label for="precio" class="block text-sm font-medium text-gray-600">Precio</label>
                    <input type="number" id="precio" name="precio" class="mt-1 p-2 w-full border rounded-md">
                </div>
                <div class="w-1/2 px-2 mb-4">
                    <label for="cantidad" class="block text-sm font-medium text-gray-600">Cantidad</label>
                    <input type="number" id="cantidad" name="cantidad" class="mt-1 p-2 w-full border rounded-md">
                </div>
                <div class="w-1/2 px-2 mb-4">
                    <label for="idProveedor" class="block text-sm font-medium text-gray-600">ID Proveedor</label>
                    <select id="idProveedor" name="idProveedor" class="mt-1 p-2 w-full border rounded-md"></select>
                </div>
@*                <div class="w-1/2 px-2 mb-4">
                    <label for="fechaIngreso" class="block text-sm font-medium text-gray-600">Fecha de Ingreso</label>
                    <input type="date" id="fechaIngreso" name="fechaIngreso" class="mt-1 p-2 w-full border rounded-md">
                </div>*@
                <!-- Columna 2 -->

                <div class="w-1/2 px-2 mb-4">
                    <label for="horaCreacion" class="block text-sm font-medium text-gray-600">Hora de Creación</label>
                    <input type="datetime-local" id="horaCreacion" name="horaCreacion" class="mt-1 p-2 w-full border rounded-md">
                </div>
                <div class="w-1/2 px-2 mb-4">
                    <label for="horaActualizacion" class="block text-sm font-medium text-gray-600">Hora de Actualización</label>
                    <input type="datetime-local" id="horaActualizacion" name="horaActualizacion" class="mt-1 p-2 w-full border rounded-md">
                </div>
<div class="w-1/2 px-2 mb-4 switch-container">
    <label for="activo" class="block text-sm font-medium text-gray-600 mb-2">Estado</label>
    <label class="switch">
        <!-- Campo oculto para enviar 'false' si el switch está en "Apagado" -->
        <input type="hidden" name="activo" value="false">
        <!-- El switch -->
        <input type="checkbox" id="activo" name="activo" class="switch-input">
        <span class="slider"></span>
    </label>
</div>




                <div class="w-1/2 px-2 mb-4">
                    <label for="idGenero" class="block text-sm font-medium text-gray-600">ID Género</label>
                    <select id="idGenero" name="idGenero" class="mt-1 p-2 w-full border rounded-md"></select>
                </div>
                <div class="w-1/2 px-2 mb-4">
                    <label for="idCategoria" class="block text-sm font-medium text-gray-600">ID Categoría</label>
                    <select id="idCategoria" name="idCategoria" class="mt-1 p-2 w-full border rounded-md"></select>
                </div>
                 <div class="w-1/2 px-2 mb-4">
                    <label for="nuevaImagen" class="block text-sm font-medium text-gray-600">Nueva Imagen</label>
                    <input type="file" id="nuevaImagen" name="nuevaImagen" accept="image/jpeg, image/png, image/jpg" class="mt-1 p-2 w-full border rounded-md">
                </div>
            <div class="w-full px-2 mb-4 flex flex-col items-center">
                <label for="imagen" class="block text-sm font-medium text-gray-600 mb-2">Imagen Actual</label>
                <img id="imagenActual" src="/path/to/your/local/image.jpg" alt="Imagen Actual" class="w-32 h-32 object-cover mb-2">
                <button type="button" id="eliminarImagen" class="bg-red-500 text-white p-2 rounded">Eliminar Imagen</button>
            </div>
            </form>
        </div>
        <div class="flex justify-end mt-4">
            <button id="saveChanges" class="bg-blue-500 text-white p-2 rounded mr-2">Guardar Cambios</button>
            <button id="closeModal" class="bg-red-500 text-white p-2 rounded">Cerrar</button>
        </div>
    </div>
</div>


<style>
    .switch-container {
    display: flex;
    flex-direction: column;
}

.switch {
    position: relative;
    display: inline-block;
    width: 60px;
    height: 34px;
}

.switch-input {
    display: none;
}

.slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: #ccc;
    -webkit-transition: .4s;
    transition: .4s;
    border-radius: 34px;
}

.slider:before {
    position: absolute;
    content: "";
    height: 26px;
    width: 26px;
    left: 4px;
    bottom: 4px;
    background-color: white;
    -webkit-transition: .4s;
    transition: .4s;
    border-radius: 50%;
}

.switch-input:checked + .slider {
    background-color: #2196F3;
}

.switch-input:focus + .slider {
    box-shadow: 0 0 1px #2196F3;
}

.switch-input:checked + .slider:before {
    -webkit-transform: translateX(26px);
    -ms-transform: translateX(26px);
    transform: translateX(26px);
}

/* Estilos del texto "ON" y "OFF" */
.slider:before {
    color: white;
    content: "OFF";
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 12px;
}

.switch-input:checked + .slider:before {
    content: "ON";
}


</style>



<!-- Paginación -->
<div class="mt-4">
    @for (int i = 1; i <= totalPaginas; i++)
    {
        <a href="@Url.Action("Index", "Productos", new { pagina = i })" class="@(i == paginaActual ? "bg-blue-500 text-white" : "text-blue-500") px-3 py-2 rounded-full mx-1">@i</a>
    }
</div>
<script>
    document.addEventListener("DOMContentLoaded", function() {
    // Escuchar clics en los botones "Editar"
    document.querySelectorAll('.open-modal').forEach(button => {
        button.addEventListener('click', async function(e) {
            const id = e.target.getAttribute('data-id');
            // Mostrar el spinner de carga
            const loadingSpinner = document.getElementById('loadingSpinner');
            loadingSpinner.classList.remove('hidden');

            
            // Ocultar el modal anterior si está abierto
            const editModal = document.getElementById('editModal');
            editModal.classList.add('hidden');
            // Hacer una llamada AJAX para obtener los datos del producto
            const response = await fetch(`/Productos/GetProductoById?idProducto=${id}`);
            
            if (response.ok) {
                const data = await response.json();
                const producto = data.result[0];
                
                // Llenar los campos del formulario en el modal
                document.getElementById('producto').value = producto.producto;
                document.getElementById('marca').value = producto.marca;
                document.getElementById('precio').value = producto.precio;
                document.getElementById('cantidad').value = producto.cantidad;
                //document.getElementById('fechaIngreso').value = producto.fechaIngreso;
                
                
                document.getElementById('horaCreacion').value = producto.horaCreacion;
                document.getElementById('horaActualizacion').value = producto.horaActualizacion;
                document.getElementById('activo').checked = producto.activo;

                // Actualizar la imagen actual
                const imagenActual = document.getElementById('imagenActual');
                imagenActual.src = producto.imagenCarpeta + producto.imagenNombre;

                // Actualizar el título del modal con el ID del producto
                document.getElementById('modalTitleId').innerText = producto.idProducto;

                // Llenar los combobox
                await fillComboBox('idProveedor', '/Productos/GetProveedores', producto.idProveedor);
                await fillComboBox('idGenero', '/Productos/GetGeneros', producto.idGenero);
                await fillComboBox('idCategoria', '/Productos/GetCategorias', producto.idCategoria);

                // Mostrar el modal
                document.getElementById('editModal').classList.remove('hidden');
                loadingSpinner.classList.add('hidden');
            }
        });
    });

    // Función para llenar un combobox
    async function fillComboBox(selectId, apiUrl, selectedValue) {
        const response = await fetch(apiUrl);
        if (response.ok) {
            const data = await response.json();
            const items = data.result;
            const select = document.getElementById(selectId);
            select.innerHTML = '';
            items.forEach(item => {
                const option = document.createElement('option');
                option.value = item.id;
                option.text = item.descripcion;
                select.appendChild(option);
            });
            select.value = selectedValue;
        }
    }
        document.getElementById('nuevaImagen').addEventListener('change', function() {
        const file = this.files[0];
        if (file) {
            const reader = new FileReader();
            reader.addEventListener('load', function() {
                document.getElementById('imagenActual').setAttribute('src', this.result);
            });
            reader.readAsDataURL(file);
        }
    });
    // Cerrar el modal
    document.getElementById('closeModal').addEventListener('click', function() {
        document.getElementById('editModal').classList.add('hidden');
    });

    // Guardar cambios (aquí podrías enviar los datos al servidor)
    document.getElementById('saveChanges').addEventListener('click', async function() {
    const idProducto = parseInt(document.getElementById('modalTitleId').innerText, 10);
    const formData = new FormData(document.getElementById('editForm'));
    formData.append('IdProducto', idProducto);
    formData.set('activo', document.getElementById('activo').checked ? 'true' : 'false');

    const response = await fetch('/Productos/UpdateProducto', {
        method: 'POST',
        body: formData
    });

    if (response.ok) {
      const data = await response.json();
      if (data.success) {
        // Mostrar la notificación con el nombre del producto
        document.getElementById('editModal').classList.add('hidden');
        const productoGuardado = document.getElementById('productoGuardado');
        productoGuardado.innerText = document.getElementById('producto').value;
        const notification = document.getElementById('notification');
        notification.classList.remove('hidden');

        // Cerrar la notificación después de unos segundos (opcional)
        setTimeout(() => {
          notification.classList.add('hidden');
        }, 5000); // La notificación se ocultará después de 5 segundos
      } else {
        // Manejar errores
        alert('No se pudo actualizar el producto.');
      }
    } else {
      // Manejar errores
      alert('Ocurrió un error al actualizar el producto.');
    }
    });
    });


</script>

