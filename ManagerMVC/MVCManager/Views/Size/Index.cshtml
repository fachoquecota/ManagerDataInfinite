@model List<Size>

@{
    ViewData["Title"] = "Size";
    var successMessage = TempData["SuccessMessage"] as string;
    var errorMessage = TempData["ErrorMessage"] as string;
}
<!-- Mensajes de notificación -->
<div class="container mx-auto p-6">
    <!-- Mensajes de notificación -->
    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative mb-4 notification" role="alert">
            <span class="block sm:inline">@successMessage</span>
            <span class="absolute top-0 bottom-0 right-4 py-3 close-notification cursor-pointer">&times;</span>
        </div>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4 notification" role="alert">
            <span class="block sm:inline">@errorMessage</span>
            <span class="absolute top-0 bottom-0 right-4 py-3 close-notification cursor-pointer">&times;</span>
        </div>
    }

</div>
<div class="container mx-auto p-6">
    <h1 class="text-2xl font-semibold mb-4">Mantenimiento de Tallas</h1>

    <!-- Estilos para el interruptor deslizable -->
    <style>
        .switch {
            position: relative;
            display: inline-block;
            width: 60px;
            height: 34px;
        }

        .switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #ccc;
            transition: .4s;
        }

        .slider:before {
            position: absolute;
            content: "";
            height: 26px;
            width: 26px;
            left: 4px;
            bottom: 4px;
            background-color: white;
            transition: .4s;
        }

        input:checked + .slider {
            background-color: #2196F3;
        }

        input:checked + .slider:before {
            transform: translateX(26px);
        }

        .slider.round {
            border-radius: 34px;
        }

        .slider.round:before {
            border-radius: 50%;
        }
    </style>
    <style>
        .notification {
    position: absolute;
    top: 20px;
    left: 50%;
    transform: translateX(-50%);
    z-index: 1000;
    width: 90%;
    max-width: 600px;
}

    </style>
    <style>
       /* Estilo para el checkbox en su estado normal */
        .slider.default {
            background-color: #B0E0E6; /* Color celeste */
        }

        input:checked + .slider.default {
            background-color: #B0E0E6; /* Color celeste cuando está activo */
        }

        /* Estilo para el checkbox cuando está en edición */
        .slider.editing {
            background-color: #32CD32; /* Color verde */
        }

        input:checked + .slider.editing {
            background-color: #32CD32; /* Color verde cuando está activo */
        }


    </style>
    <div class="p-4 bg-white rounded-lg shadow-md">
        <h2 class="text-xl font-semibold mb-4">Lista de Tallas</h2>

        <!-- Botón para abrir el modal -->
        <button onclick="openModal()" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
            Add New Size
        </button>

        <!-- Tabla de Size -->
        <table class="min-w-full divide-y divide-gray-200 text-center rounded-lg shadow-sm">
            <thead class="bg-gray-100">
                <tr>
                    <th class="px-2 py-2">idSize</th>
                    <th class="px-2 py-2">Description</th>
                    <th class="px-2 py-2">Active</th>
                    <th class="px-2 py-2">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var size in Model)
                {
                    <tr data-id="@size.idSize">
                        <td class="px-2 py-2">@size.idSize</td>
                        <td class="px-2 py-2 description">@size.descripcion</td>
                        <td class="px-2 py-2 active">
                            <label class="switch">
                                <input type="checkbox" @(size.activo ? "checked" : "") disabled>
                                <span class="slider round default"></span> <!-- Añadir la clase 'default' aquí -->
                            </label>
                        </td>
                        <td class="px-2 py-2 actions">
                            <button class="text-blue-500 hover:text-blue-700 edit-btn">Edit</button>
                            <button class="text-red-500 hover:text-red-700 delete-btn" data-id="@size.idSize">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
<!-- Modal -->
<div id="myModal" class="fixed top-0 left-0 w-full h-full bg-gray-900 bg-opacity-50 hidden">
    <div class="bg-white rounded-lg w-1/3 mx-auto mt-20 p-5">
        <h2 class="text-xl font-semibold mb-4">Add New Size</h2>
        <form method="post" action="/Size/Create">
            <div class="mb-4">
                <label for="descripcion" class="block text-sm font-bold mb-2">Description:</label>
                <input type="text" id="descripcion" name="descripcion" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
            </div>
            <div class="mb-4 flex justify-start items-center">
                <label class="block text-sm font-bold mr-2">Active:</label>
                <label class="switch">
                    <input type="checkbox" name="activo" value="true">
                    <span class="slider round"></span>
                </label>
            </div>
            <div class="flex items-center justify-between">
                <button type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline">
                    Add
                </button>
                <button type="button" onclick="closeModal()" class="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline">
                    Cancel
                </button>
            </div>
        </form>
    </div>
</div>

<div id="editModal" class="hidden fixed top-0 left-0 w-full h-full bg-black bg-opacity-50 z-50 flex justify-center items-center">
    <div class="bg-white w-1/3 rounded-lg shadow-lg p-4">
        <h2 class="text-lg font-bold mb-4">Editar Registro</h2>
        <form id="editForm" method="post" action="/Size/Update">
            <input type="hidden" name="idSize" id="editIdSize">
            <div class="mb-4">
                <label for="editDescription" class="block text-sm font-bold mb-2">Descripción:</label>
                <input type="text" id="editDescription" name="descripcion" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
            </div>
            <div class="mb-4 flex justify-start items-center">
                <label class="block text-sm font-bold mr-2">Active:</label>
                <label class="switch">
                    <input type="checkbox" id="editActive" name="activo" value="true">
                    <span class="slider round"></span>
                </label>
            </div>
            <div class="flex justify-end">
                <button type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mr-2">Guardar</button>
                <button type="button" id="closeEditModal" class="bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded">Cancelar</button>
            </div>
        </form>
    </div>
</div>
<div id="deleteModal" class="hidden fixed top-0 left-0 w-full h-full bg-black bg-opacity-50 z-50 flex justify-center items-center">
    <div class="bg-white w-1/3 rounded-lg shadow-lg p-4">
        <h2 class="text-lg font-bold mb-4">Confirmar eliminación</h2>
        <p>¿Estás seguro de que deseas eliminar este registro?</p>
        <form id="deleteForm" method="post" action="/Size/Delete">
            <input type="hidden" name="idSize" id="deleteIdSize">
            <div class="flex justify-end mt-4">
                <button type="submit" class="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded mr-2">Eliminar</button>
                <button type="button" id="cancelDelete" class="bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded">Cancelar</button>
            </div>
        </form>
    </div>
</div>


<script>
    document.addEventListener("DOMContentLoaded", function() {
        bindEditEvent();
        bindDeleteEvent();

        // Cerrar notificaciones después de 5 segundos
        setTimeout(function() {
            var notifications = document.querySelectorAll('.notification');
            notifications.forEach(function(notification) {
                notification.style.display = 'none';
            });
        }, 5000);

        // Cerrar notificación manualmente
        var closeButtons = document.querySelectorAll('.close-notification');
        closeButtons.forEach(function(button) {
            button.addEventListener('click', function() {
                this.parentElement.style.display = 'none';
            });
        });

        document.getElementById('closeEditModal').addEventListener('click', function() {
            document.getElementById('editModal').classList.add('hidden');
        });
    });

    function openModal() {
        document.getElementById('myModal').style.display = 'block';
    }

    function closeModal() {
        document.getElementById('myModal').style.display = 'none';
    }

    function bindEditEvent() {
        var editButtons = document.querySelectorAll('.edit-btn');
        editButtons.forEach(function(button) {
            button.removeEventListener('click', handleEditClick); // Eliminar el evento anterior para evitar duplicados
            button.addEventListener('click', handleEditClick);
        });
    }

    function handleEditClick() {
        var row = this.closest('tr');
    
        if (!row) {
            console.error('No se encontró el elemento <tr> más cercano.');
            return;
        }

        var descriptionCell = row.querySelector('.description');
        var activeCell = row.querySelector('.active');

        var currentDescription = descriptionCell.textContent;
        var currentActive = activeCell.querySelector('input[type="checkbox"]').checked;
        console.log(currentActive);
        var currentId = row.getAttribute('data-id');

        // Llenar el modal con los valores actuales
        document.getElementById('editDescription').value = currentDescription;
        document.getElementById('editActive').checked = currentActive;
        document.getElementById('editIdSize').value = currentId;

        console.log(document.getElementById('editActive').checked);

        // Mostrar el modal
        document.getElementById('editModal').classList.remove('hidden');

        // Adjuntar el evento onsubmit solo si no se ha adjuntado previamente
        var editForm = document.getElementById('editForm');
        if (!editForm.dataset.eventAttached) {
            editForm.onsubmit = function() {
                var checkbox = document.getElementById('editActive');
                checkbox.value = checkbox.checked ? "true" : "false";
            };
            editForm.dataset.eventAttached = "true";
        }
    }

    function bindDeleteEvent() {
        var deleteButtons = document.querySelectorAll('.delete-btn');
        deleteButtons.forEach(function(button) {
            button.addEventListener('click', function() {
                var idSize = this.getAttribute('data-id');
            
                // Establecer el valor del campo oculto con el id del registro
                document.getElementById('deleteIdSize').value = idSize;
            
                // Mostrar el modal
                document.getElementById('deleteModal').classList.remove('hidden');
            });
        });
    }

   // Evento para el botón "Cancelar" dentro del modal
    document.getElementById('cancelDelete').addEventListener('click', function() {
        // Ocultar el modal
        document.getElementById('deleteModal').classList.add('hidden');
    });

</script>