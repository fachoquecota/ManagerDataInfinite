@model List<Color>

@{
    ViewData["Title"] = "Mantenimiento de Colores";
    var successMessage = TempData["SuccessMessage"] as string;
    var errorMessage = TempData["ErrorMessage"] as string;
}

<!-- Mensajes de notificación -->
@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative mb-4 notification" role="alert">
        <span class="block sm:inline">@successMessage</span>
        <span class="absolute top-0 bottom-0 right-4 py-3 close-notification cursor-pointer">&times;</span>
    </div>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4 notification" role="alert">
        <span class="block sm:inline">@errorMessage</span>
        <span class="absolute top-0 bottom-0 right-4 py-3 close-notification cursor-pointer">&times;</span>
    </div>
}


<div class="container mx-auto p-6">

   
    <h1 class="text-2xl font-semibold mb-4">Mantenimiento de Colores</h1>
    
    <div class="p-4 bg-white rounded-lg shadow-md">
        <div class="flex justify-between items-center mb-4">
            <!-- Botón para agregar -->
            <button onclick="openColorModal()" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                Agregar Nuevo Color
            </button>
            <!-- Campo de búsqueda -->
            <input type="text" id="searchInput" placeholder="Buscar..." class="p-2 border rounded shadow appearance-none focus:outline-none focus:shadow-outline">
        </div>
        <!-- Tabla de Colores -->
        <table class="min-w-full divide-y divide-gray-200 text-center rounded-lg shadow-sm">
            <thead class="bg-gray-100">
                <tr>
                    <th class="px-2 py-2">idColor</th>
                    <th class="px-2 py-2">Código</th>
                    <th class="px-2 py-2">Color</th>
                    <th class="px-2 py-2">Descripción</th>
                    <th class="px-2 py-2">Activo</th>
                    <th class="px-2 py-2">Acciones</th>
                </tr>
            </thead>
                <tbody>
                    @foreach (var color in Model)
                    {
                        <tr>
                            <td class="px-2 py-2">@color.idColor</td>
                            <td class="px-2 py-2">@color.codigo</td>
                            <td class="px-2 py-2 flex justify-center items-center">
                                <div style="width:20px;height:20px;background-color:@($"#{color.codigo}");"></div>
                            </td>

                            <td class="px-2 py-2">@color.descripcion</td>
                            <td class="px-2 py-2">
                                <label class="switch">
                                    <input type="checkbox" @(color.activo ? "checked" : "") disabled>
                                    <span class="slider round"></span>
                                </label>
                            </td>
                            <td class="px-2 py-2">
                                <button class="text-blue-500 hover:text-blue-700" onclick="openEditColorModal(@color.idColor, '@color.codigo', '@color.descripcion', @(color.activo.ToString().ToLower()))">Editar</button>
                                <button class="text-red-500 hover:text-red-700" onclick="openDeleteColorModal(@color.idColor)">Eliminar</button>
                            </td>
                        </tr>
                    }
                </tbody>
        </table>
        <div class="flex justify-center mt-4">
            <button id="prevPage" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-l focus:outline-none focus:shadow-outline">
                Anterior
            </button>
            <span id="currentPage" class="p-4">1</span>
            <button id="nextPage" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-r focus:outline-none focus:shadow-outline">
                Siguiente
            </button>
        </div>
    </div>
</div>

<!-- Modal para agregar un nuevo color -->
<div id="colorModal" class="fixed top-0 left-0 w-full h-full bg-gray-900 bg-opacity-50 hidden">
    <div class="bg-white rounded-lg w-1/3 mx-auto mt-20 p-5">
        <h2 class="text-xl font-semibold mb-4">Agregar Nuevo Color</h2>
        <form id="addColorForm" method="post" action="@Url.Action("AddColor", "Color")">
            <div class="mb-4">
                <label for="colorCode" class="block text-sm font-bold mb-2">Código:</label>
                <input type="text" id="colorCode" name="codigo" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
                <!-- Paleta de colores -->
                <input type="color" id="colorPicker" class="mt-2 w-full">
            </div>
            <div class="mb-4">
                <label for="colorDescription" class="block text-sm font-bold mb-2">Descripción:</label>
                <input type="text" id="colorDescription" name="descripcion" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
            </div>
            <div class="mb-4 flex justify-start items-center">
                <label class="block text-sm font-bold mr-2">Activo:</label>
                <input type="checkbox" name="activo" value="true">
            </div>
            <div class="flex items-center justify-between">
                <button type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline">
                    Agregar
                </button>
                <button type="button" onclick="closeColorModal()" class="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline">
                    Cancelar
                </button>
            </div>
        </form>
    </div>
</div>


<!-- Modal para editar un color -->
<div id="editColorModal" class="fixed top-0 left-0 w-full h-full bg-gray-900 bg-opacity-50 hidden">
    <div class="bg-white rounded-lg w-1/3 mx-auto mt-20 p-5">
        <h2 class="text-xl font-semibold mb-4">Editar Color</h2>
        <form id="editColorForm" method="post" action="/Color/Edit">
            <input type="hidden" id="editIdColor" name="idColor">
            <div class="mb-4">
                <label for="editColorCode" class="block text-sm font-bold mb-2">Código:</label>
                <input type="text" id="editColorCode" name="codigo" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline mb-2">
                <!-- Paleta de colores -->
                <input type="color" id="editColorPicker" class="w-full">
                <!-- Display del color seleccionado -->
@*                <div id="editColorDisplay" class="w-full h-6 mt-2"></div>
*@            </div>

            <div class="mb-4">
                <label for="editColorDescription" class="block text-sm font-bold mb-2">Descripción:</label>
                <input type="text" id="editColorDescription" name="descripcion" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
            </div>
            <div class="mb-4 flex justify-start items-center">
                <label class="block text-sm font-bold mr-2">Activo:</label>
                <input type="checkbox" id="editColorActive" name="activo" value="true">
            </div>
            <div class="flex items-center justify-between">
                <button type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline">
                    Guardar
                </button>
                <button type="button" onclick="closeEditColorModal()" class="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline">
                    Cancelar
                </button>
            </div>
        </form>
    </div>
</div>

<!-- Modal de Confirmación de Eliminación -->
<div id="deleteColorModal" class="fixed top-0 left-0 w-full h-full bg-gray-900 bg-opacity-50 hidden">
    <div class="bg-white rounded-lg w-1/3 mx-auto mt-20 p-5">
        <h2 class="text-xl font-semibold mb-4">Confirmar Eliminación</h2>
        <p>¿Estás seguro de que deseas eliminar este color?</p>
        <form id="deleteColorForm" method="post" action="/Color/Delete">
            <input type="hidden" id="deleteIdColor" name="idColor">
            <div class="flex items-center justify-between mt-4">
                <button type="submit" class="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline">
                    Eliminar
                </button>
                <button type="button" onclick="closeDeleteColorModal()" class="bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline">
                    Cancelar
                </button>
            </div>
        </form>
    </div>
</div>


<style>
    .notification {
    position: absolute;
    top: 20px;
    left: 50%;
    transform: translateX(-50%);
    z-index: 1000;
    width: 90%;
    max-width: 600px;
}

</style>


<!-- Estilos del switch -->
<style>
    .switch {
        position: relative;
        display: inline-block;
        width: 60px;
        height: 34px;
    }
    
    .switch input {
        opacity: 0;
        width: 0;
        height: 0;
    }
    
    .slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #ccc;
        transition: .4s;
    }
    
    .slider:before {
        position: absolute;
        content: "";
        height: 26px;
        width: 26px;
        left: 4px;
        bottom: 4px;
        background-color: white;
        transition: .4s;
    }
    
    input:checked + .slider {
        background-color: #2196F3;
    }
    
    input:checked + .slider:before {
        transform: translateX(26px);
    }
    
    .slider.round {
        border-radius: 34px;
    }
    
    .slider.round:before {
        border-radius: 50%;
    }
</style>
<script>
   // Función para abrir el modal
function openColorModal() {
    document.getElementById('colorModal').classList.remove('hidden');
}

// Función para cerrar el modal
function closeColorModal() {
    document.getElementById('colorModal').classList.add('hidden');
}

// Evento para abrir la paleta de colores al hacer clic en el cuadro de texto
document.getElementById('colorCode').addEventListener('click', function() {
    document.getElementById('colorPicker').click();
});

// Evento para el input de tipo color
document.getElementById('colorPicker').addEventListener('input', function() {
    document.getElementById('colorCode').value = this.value.slice(1); // Eliminamos el "#" del inicio
});

document.addEventListener("DOMContentLoaded", function() {
    // Cerrar notificaciones después de 5 segundos
    setTimeout(function() {
        var notifications = document.querySelectorAll('.notification');
        notifications.forEach(function(notification) {
            notification.style.display = 'none';
        });
    }, 5000);

    // Cerrar notificación manualmente
    var closeButtons = document.querySelectorAll('.close-notification');
    closeButtons.forEach(function(button) {
        button.addEventListener('click', function() {
            this.parentElement.style.display = 'none';
        });
    });
});

function openEditColorModal(id, codigo, descripcion, activo) {
    // Llenar los campos con los datos del registro seleccionado
    document.getElementById('editIdColor').value = id;
    document.getElementById('editColorCode').value = codigo;
    document.getElementById('editColorDescription').value = descripcion;
    document.getElementById('editColorActive').checked = activo;

    // Inicializar la paleta de colores y el display del color
    document.getElementById('editColorPicker').value = "#" + codigo;
    //document.getElementById('editColorDisplay').style.backgroundColor = "#" + codigo;

    // Abrir el modal
    document.getElementById('editColorModal').classList.remove('hidden');
}


function closeEditColorModal() {
    document.getElementById('editColorModal').classList.add('hidden');
}

// Evento para el input de tipo color en el modal de edición
document.getElementById('editColorPicker').addEventListener('input', function() {
    document.getElementById('editColorCode').value = this.value.slice(1); // Eliminamos el "#" del inicio
    //document.getElementById('editColorDisplay').style.backgroundColor = this.value;
});

function openDeleteColorModal(idColor) {
    document.getElementById('deleteIdColor').value = idColor;
    document.getElementById('deleteColorModal').classList.remove('hidden');
}

function closeDeleteColorModal() {
    document.getElementById('deleteColorModal').classList.add('hidden');
}

document.getElementById('searchInput').addEventListener('keyup', function() {
    let filter = this.value.toUpperCase();
    let rows = document.querySelector("table tbody").rows;

    for (let i = 0; i < rows.length; i++) {
        let col = rows[i].querySelectorAll("td")[3]; // Asume que quieres buscar en la columna de descripción. Cambia el índice si es necesario.
        if (col) {
            let txtValue = col.textContent || col.innerText;
            if (txtValue.toUpperCase().indexOf(filter) > -1) {
                rows[i].style.display = "";
            } else {
                rows[i].style.display = "none";
            }
        }
    }
});

// Ordenar la tabla por idColor en orden descendente
function sortTable() {
    let table = document.querySelector("table tbody");
    let rows = Array.from(table.rows);

    rows.sort((a, b) => {
        return b.cells[0].innerText - a.cells[0].innerText; // Asume que idColor está en la primera columna
    });

    rows.forEach(row => table.appendChild(row));
}

sortTable();

// Paginación
let currentPage = 1;
const rowsPerPage = 10;
const rows = document.querySelector("table tbody").rows;

function updateTable() {
    for (let i = 0; i < rows.length; i++) {
        if (i < rowsPerPage * (currentPage - 1) || i >= rowsPerPage * currentPage) {
            rows[i].style.display = "none";
        } else {
            rows[i].style.display = "";
        }
    }

    document.getElementById('currentPage').innerText = currentPage;
}

document.getElementById('prevPage').addEventListener('click', function() {
    if (currentPage > 1) {
        currentPage--;
        updateTable();
    }
});

document.getElementById('nextPage').addEventListener('click', function() {
    if (currentPage < Math.ceil(rows.length / rowsPerPage)) {
        currentPage++;
        updateTable();
    }
});

updateTable();


</script>
