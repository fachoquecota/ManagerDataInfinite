@model List<ProductoModel>

@{
    ViewData["Title"] = "Ventas";
}

<div class="container mx-auto p-6">
    <h1 class="text-2xl font-semibold mb-4">Ventas</h1>

    <div class="flex flex-wrap -mx-2">
        <!-- Tarjeta de Lista de Productos -->
        <div class="w-full md:w-1/2 px-2 mb-4">
            <div class="p-4 bg-white rounded-lg shadow-md">
                <h2 class="text-xl font-semibold mb-4 text-blue-500">Lista de Productos</h2>
                <div class="relative mb-4">
                    <label for="modeloInput" class="block text-sm font-medium text-gray-600">Modelo:</label>
                    <input type="text" id="modeloInput" placeholder="Buscar modelo" class="mt-1 p-2 w-full rounded-md border shadow-sm">
                    <div id="modeloDropdown" class="absolute w-full mt-2 bg-white border rounded-md shadow-lg z-10 hidden"></div>
    
                    <!-- Contenedor para el modelo seleccionado y la "X" -->
                    <div id="modeloSeleccionado" class="mt-2 p-2 bg-gray-200 rounded flex items-center justify-between hidden">
                        <span></span> <!-- Aquí se mostrará el modelo seleccionado -->
                        <button class="ml-2 text-red-500 hover:text-red-700" onclick="eliminarModelo()">X</button>
                    </div>

                </div>


                <!-- Sección de Búsqueda de Productos -->
                <div class="mb-4">
                    <label for="buscarProducto" class="block text-sm font-medium text-gray-600">Buscar Producto:</label>
                    <input type="text" id="buscarProducto" name="buscarProducto" placeholder="Ingrese nombre del producto" class="mt-1 p-2 w-full rounded-md border shadow-sm">
                </div>


                <!-- Matriz de Productos -->
                <div id="productosGrid" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 mb-4">
                    @foreach (var producto in Model)
                    {
                        var urlImagenCompleta = $"{producto.ImagenCarpeta}/{producto.ImagenNombre}"; // Combina imagenCarpeta e imagenNombre

                        <div class="producto bg-white p-3 rounded-lg shadow-md transition-transform transform hover:scale-105" data-idproducto="@producto.IdProducto">
                            <div class="relative mb-3">
                                <img src="@urlImagenCompleta" alt="@producto.Producto" class="w-24 h-24 object-cover rounded-md mx-auto">
                            </div>
                            <h3 class="text-center text-md mb-2">@producto.Producto</h3>
                            <p class="text-center text-sm mb-3">@producto.Precio.ToString("0.00")</p>
                            <button class="text-blue-500 hover:text-blue-700 block w-full py-1 px-3 border border-blue-500 rounded-md transition-colors hover:bg-blue-500 hover:text-white">Seleccionar</button>
                        </div>
                    }
                </div>

                <!-- Paginación -->
                <div class="flex justify-center mt-4">
                    <button id="prevPage" class="bg-blue-500 text-white px-4 py-2 rounded-l-md">Anterior</button>
                    <button id="nextPage" class="bg-blue-500 text-white px-4 py-2 rounded-r-md">Siguiente</button>
                </div>
            </div>
        </div>
        <!-- Tarjeta de Formulario -->
        <div class="w-full md:w-1/2 px-2 mb-4">
            <div class="p-4 bg-white rounded-lg shadow-md">
                <h2 class="text-xl font-semibold mb-4 text-blue-500">Detalles de la Venta</h2>

                <!-- Tipo de Venta -->
                <div class="mb-4">
                    <label for="tipoVenta" class="block text-sm font-medium text-gray-600">Tipo de Venta:</label>
                    <select id="tipoVenta" name="tipoVenta" class="mt-1 p-2 w-full rounded-md border shadow-sm"></select>
                </div>

                <!-- Selección de Cliente -->
                <div class="mb-4">
                    <label for="cliente" class="block text-sm font-medium text-gray-600">Seleccionar Cliente:</label>
                    <select id="cliente" name="cliente" class="mt-1 p-2 w-full rounded-md border shadow-sm">
                        <option>Cliente 1</option>
                        <option>Cliente 2</option>
                        <!-- Más clientes -->
                    </select>
                </div>

                <!-- Lista de Productos Seleccionados -->
                <div class="mb-4">
                    <h3 class="text-md font-medium text-gray-600">Productos Seleccionados: <span id="contadorProductos">0</span></h3>
                    <table id="tablaProductosSeleccionados" class="min-w-full divide-y divide-gray-200 text-center rounded-lg shadow-sm">
                        <thead class="bg-gray-100">
                            <tr>
                                <th class="px-2 py-2">Imagen</th>
                                <th class="px-2 py-2">Producto</th>
                                <th class="px-2 py-2">Cantidad</th>
                                <th class="px-2 py-2">Precio</th> <!-- Mantenemos la columna Precio -->
                                <th class="px-2 py-2">Total</th>
                                <th class="px-2 py-2">Acciones</th>
                            </tr>
                        </thead>

                        <tbody>
                            <!-- Productos Seleccionados serán añadidos aquí -->
                        </tbody>
                    </table>
                </div>

                <button type="submit" id="confirmSaleButton" class="px-4 py-2 bg-blue-500 text-white rounded-md">Confirmar Venta</button>
            </div>
        </div>



    </div>
</div>
<!-- Modal -->
<div class="fixed z-10 inset-0 overflow-y-auto hidden" aria-labelledby="modal-title" role="dialog" aria-modal="true" id="confirmSaleModal">
  <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
    <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" aria-hidden="true"></div>
    <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>

    <div class="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-2xl sm:w-full">
      <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
        <h3 class="text-lg leading-6 font-medium text-gray-900" id="modal-title">
          Confirmar Venta
        </h3>
        <div class="mt-2">
            <!-- Aquí irá la tabla con los productos seleccionados y los detalles -->
            <div id="modalTableContent">
                <!-- El contenido de la tabla se copiará aquí -->
            </div>

            <!-- Campo de venta -->
            <div class="mt-4">
                <label for="totalSale" class="block text-sm font-medium text-gray-600">Venta Total:</label>
                <input type="text" id="totalSale" class="mt-1 p-2 w-full rounded-md border shadow-sm" readonly>
            </div>
        </div>
      </div>
      <div class="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
        <button type="button" class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-blue-600 text-base font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 sm:ml-3 sm:w-auto sm:text-sm" id="confirmFinalSale">
          Confirmar
        </button>
        <button type="button" class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm" id="closeModal">
          Cancelar
        </button>
      </div>
    </div>


  </div>
</div>
<script>
    // Función para recalcular el total de un producto
    function recalculateProductTotal(row) {
        const cantidad = parseInt(row.querySelector(".quantity-input").value, 10);
        const precio = parseFloat(row.querySelector(".price-input").value);
        const totalCell = row.querySelector(".total-cell");
        totalCell.textContent = (cantidad * precio).toFixed(2);
    }

    // Función para recalcular la "Venta Total"
    function recalculateSaleTotal() {
        const rows = document.getElementById("tablaProductosSeleccionados").querySelectorAll("tbody tr");
        let totalSale = 0;
        rows.forEach(row => {
            totalSale += parseFloat(row.querySelector(".total-cell").textContent);
        });
        document.getElementById("totalSale").value = totalSale.toFixed(2);
    }
    document.addEventListener("DOMContentLoaded", () => {


    /* Función para agregar productos a "Detalles de venta" */
    function agregarProductoADetalles(producto) {
        const tablaProductosSeleccionados = document.getElementById("tablaProductosSeleccionados");
        const idProducto = producto.getAttribute("data-idproducto");
        const existingRow = tablaProductosSeleccionados.querySelector(`[data-idproducto="${idProducto}"]`);
    
        if (existingRow) {
                const quantityInput = existingRow.querySelector(".quantity-input");
                quantityInput.value = parseInt(quantityInput.value) + 1;
                
                // Llama a la función para recalcular después de actualizar la cantidad
                recalculateProductTotal(existingRow);
                recalculateSaleTotal();
            }  else {
            const nombreProducto = producto.querySelector("h3").textContent;
            const precioProducto = producto.querySelector("p").textContent;
            const newRow = document.createElement("tr");
            const imgSrc = producto.querySelector("img").src; // Obten la URL de la imagen

            newRow.setAttribute("data-idproducto", idProducto);
            newRow.innerHTML = `
                <td class="px-2 py-2"><img src="${imgSrc}" alt="${nombreProducto}" class="w-12 h-12 object-cover rounded-md"></td>
                <td class="px-2 py-2">${nombreProducto}</td>
                <td class="px-2 py-2"><input type="number" value="1" min="1" class="w-16 border rounded p-1 quantity-input"></td>
                <td class="px-2 py-2"><input type="text" value="${precioProducto}" class="w-20 border rounded p-1 price-input"></td>
                <td class="px-2 py-2 total-cell">${parseFloat(precioProducto).toFixed(2)}</td>
                <td class="px-2 py-2"><button class="text-red-500 hover:text-red-700">Eliminar</button></td>
            `;
            tablaProductosSeleccionados.querySelector("tbody").appendChild(newRow);
        }
    }

    /* Evento para el botón de agregar producto */
    document.getElementById("productosGrid").addEventListener("click", (e) => {
        if (e.target.tagName === "BUTTON") {
            const producto = e.target.closest(".producto");
            agregarProductoADetalles(producto);
        }
    });
    /* Funciones */
    function filtrarProductosPorModelo(idModelo) {
        const productos = document.querySelectorAll(".producto");
        productos.forEach(producto => {
            if (producto.getAttribute("data-idmodelo") == idModelo) {
                producto.style.display = "block";
            } else {
                producto.style.display = "none";
            }
        });
    }

    function mostrarTodosLosProductos() {
        const productos = document.querySelectorAll(".producto");
        productos.forEach(producto => {
            producto.style.display = "block";
        });
    }

    /* Evento para el botón de confirmación de venta */
    document.getElementById("confirmSaleButton").addEventListener("click", function(event) {
        event.preventDefault();
        document.getElementById("confirmSaleModal").classList.remove("hidden"); // Muestra el modal


        // Copia el contenido de la tabla de productos seleccionados
        const selectedProductsTable = document.getElementById("tablaProductosSeleccionados").cloneNode(true);

        // Elimina la columna de "Acción" de la tabla copiada
        selectedProductsTable.querySelectorAll("thead tr th:last-child, tbody tr td:last-child").forEach(cell => cell.remove());

        // Desactiva los campos de entrada de la tabla copiada
        selectedProductsTable.querySelectorAll("input").forEach(input => input.disabled = true);

        // Pega el contenido en el modal
        const modalTableContent = document.getElementById("modalTableContent");
        modalTableContent.innerHTML = '';
        modalTableContent.appendChild(selectedProductsTable);

        // Calcular los totales de costo y venta (puedes ajustar esta parte según la estructura de tu tabla)
        let totalCost = 0;
        let totalSale = 0;
        const rows = selectedProductsTable.querySelectorAll("tbody tr");
        rows.forEach(row => {
            const costValue = parseFloat(row.querySelector("td:nth-child(4) input").value.replace("", "")); // Asume que el costo está en la tercera columna
            const saleValue = parseFloat(row.querySelector("td:nth-child(4) input").value.replace("", "")); // Ahora el precio de venta está en la cuarta columna
            totalCost += costValue;
            totalSale += saleValue;
        });

        // Llena los campos de costo y venta
        //document.getElementById("totalCost").value = "" + totalCost.toFixed(2);
        document.getElementById("totalSale").value = "" + totalSale.toFixed(2);

        // Activar la edición de los campos de costo y venta
        //document.getElementById("totalCost").removeAttribute("readonly");
        document.getElementById("totalSale").removeAttribute("readonly");

        // Muestra el modal
        document.getElementById("confirmSaleModal").classList.remove("hidden");

        // Evento para cerrar el modal al hacer clic en "Cancelar"
        document.getElementById("closeModal").addEventListener("click", function() {
            document.getElementById("confirmSaleModal").classList.add("hidden");
        });

        // Evento para "Confirmar"
        document.getElementById("confirmFinalSale").addEventListener("click", function(event) {
            event.preventDefault(); // Previene el comportamiento predeterminado del botón

            const rows = document.getElementById("tablaProductosSeleccionados").querySelectorAll("tbody tr");
    
            const dataToSend = {
                productos: [],
                ventaTotal: parseFloat(document.getElementById("totalSale").value)
            };

            rows.forEach((row, index) => {
                const idProducto = parseInt(row.getAttribute("data-idproducto"), 10);
                const cantidad = parseInt(row.querySelector(".quantity-input").value, 10);
                const precio = parseFloat(row.querySelector(".price-input").value);
                const total = parseFloat(row.querySelector(".total-cell").textContent);

                dataToSend.productos.push({
                    id: idProducto,
                    cantidad: cantidad,
                    precio: precio,
                    total: total
                });
            });

            fetch('/Venta/GuardarVenta', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(dataToSend)
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Respuesta del servidor no es OK');
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    // Puedes mostrar un mensaje de éxito o hacer alguna otra acción
                    alert('Venta guardada con éxito');
                    document.getElementById("confirmSaleModal").classList.add("hidden");
                } else {
                    alert('Hubo un error al guardar la venta: ' + (data.message || ''));
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Hubo un error al procesar la solicitud.');
            });
        });

        // Función para recalcular el total de un producto
        function recalculateProductTotal(row) {
            const cantidad = parseInt(row.querySelector(".quantity-input").value, 10);
            const precio = parseFloat(row.querySelector(".price-input").value);
            const totalCell = row.querySelector(".total-cell");
    
            const newTotal = (cantidad * precio).toFixed(2);
            totalCell.textContent = newTotal;
            console.log(`Recalculado total del producto: ${newTotal}`);
        }

        // Función para recalcular la "Venta Total"
        function recalculateSaleTotal() {
            const rows = document.getElementById("tablaProductosSeleccionados").querySelectorAll("tbody tr");
            let totalSale = 0;

            rows.forEach(row => {
                totalSale += parseFloat(row.querySelector(".total-cell").textContent);
            });

            document.getElementById("totalSale").value = totalSale.toFixed(2);
            console.log(`Recalculado total de la venta: ${totalSale.toFixed(2)}`);
        }

        function agregarProductoADetalles(producto) {
            const tablaProductosSeleccionados = document.getElementById("tablaProductosSeleccionados");
            const idProducto = producto.getAttribute("data-idproducto");
            const existingRow = tablaProductosSeleccionados.querySelector(`[data-idproducto="${idProducto}"]`);
    
            if (existingRow) {
                const quantityInput = existingRow.querySelector(".quantity-input");
                quantityInput.value = parseInt(quantityInput.value) + 1;
                recalculateProductTotal(existingRow);  // Recalcular después de actualizar la cantidad
                recalculateSaleTotal();
            } else {
                // ... (resto del código)
            }
        }
        // Evento para recalcular el total cuando se edite la cantidad o el precio de un producto
        document.getElementById("tablaProductosSeleccionados").addEventListener("input", function(event) {
            if (event.target && (event.target.matches(".quantity-input") || event.target.matches(".price-input"))) {
                const row = event.target.closest("tr");
        
                recalculateProductTotal(row);
                recalculateSaleTotal();
            }
        });


    });

    /* Evento para la búsqueda de productos */
    document.getElementById("buscarProducto").addEventListener("input", function() {
        const searchTerm = this.value.toLowerCase();
        const productos = document.querySelectorAll(".producto");
        productos.forEach(producto => {
            const productoName = producto.querySelector("h3").textContent.toLowerCase();
            if (productoName.includes(searchTerm)) {
                producto.style.display = "block";
            } else {
                producto.style.display = "none";
            }
        });
    });

    /* Evento para el input de modelos */
    document.getElementById("modeloInput").addEventListener("focus", function() {
        document.getElementById("modeloDropdown").style.display = "block";
    });
    document.getElementById("modeloInput").addEventListener("blur", function() {
        setTimeout(() => {
            document.getElementById("modeloDropdown").style.display = "none";
        }, 200);
    });

    /* Eventos para cerrar el dropdown de modelos */
    document.addEventListener("click", function(event) {
        const modeloInput = document.getElementById("modeloInput");
        const modeloDropdown = document.getElementById("modeloDropdown");
        if (!modeloInput.contains(event.target) && !modeloDropdown.contains(event.target)) {
            modeloDropdown.style.display = "none";
        }
    });

    /* Llenar el combobox de modelos al cargar la página */
    fetch("/Venta/GetModelos")
        .then(response => response.json())
        .then(data => {
            const modeloDropdown = document.getElementById("modeloDropdown");
            data.result.forEach(item => {
                const opcion = document.createElement("div");
                opcion.className = "p-2 hover:bg-gray-200 cursor-pointer";
                opcion.textContent = item.descripcion;
                opcion.addEventListener("click", function() {
                    document.getElementById("modeloInput").value = item.descripcion;
                    const modeloSeleccionadoDiv = document.getElementById("modeloSeleccionado");
                    modeloSeleccionadoDiv.querySelector("span").textContent = item.descripcion;
                    modeloSeleccionadoDiv.classList.remove("hidden");
                    modeloDropdown.style.display = "none";
                    filtrarProductosPorModelo(item.id);
                });
                modeloDropdown.appendChild(opcion);
            });
        });

    /* Evento para eliminar el modelo seleccionado y mostrar todos los productos */
    document.getElementById("modeloSeleccionado").addEventListener("click", function() {
        document.getElementById("modeloInput").value = "";
        this.classList.add("hidden");
        mostrarTodosLosProductos();
    });

    /* Llenar el dropdown de tipos de venta al cargar la página */
    fetch("/Venta/GetTiposVenta")
        .then(response => response.json())
        .then(data => {
            const tipoVentaSelect = document.getElementById("tipoVenta");
            data.forEach(item => {
                const option = document.createElement("option");
                option.value = item.id;
                option.textContent = item.descripcion;
                tipoVentaSelect.appendChild(option);
            });
        });

        // Manejador de eventos para el botón "Eliminar"
    tablaProductosSeleccionados.addEventListener("click", function(e) {
        if (e.target && e.target.matches("button.text-red-500")) {
            const filaProducto = e.target.closest("tr");
            filaProducto.remove();  // Elimina la fila

            // Si tienes un contador, disminuye el contador en 1
            count--;
            contadorProductos.textContent = count;
        }
    });
});

</script>
@*<script>
document.getElementById("confirmSaleButton").addEventListener("click", function(event) {
    event.preventDefault();

    // Copia el contenido de la tabla de productos seleccionados
    const selectedProductsTable = document.getElementById("tablaProductosSeleccionados").cloneNode(true);

    // Elimina la columna de "Acción" de la tabla copiada
    selectedProductsTable.querySelectorAll("thead tr th:last-child, tbody tr td:last-child").forEach(cell => cell.remove());

    // Desactiva los campos de entrada de la tabla copiada
    selectedProductsTable.querySelectorAll("input").forEach(input => input.disabled = true);

    // Pega el contenido en el modal
    const modalTableContent = document.getElementById("modalTableContent");
    modalTableContent.innerHTML = '';
    modalTableContent.appendChild(selectedProductsTable);

    // Calcular los totales de costo y venta (puedes ajustar esta parte según la estructura de tu tabla)
    let totalCost = 0;
    let totalSale = 0;
    const rows = selectedProductsTable.querySelectorAll("tbody tr");
    rows.forEach(row => {
        const costValue = parseFloat(row.querySelector("td:nth-child(4) input").value.replace("", "")); // Asume que el costo está en la tercera columna
        const saleValue = parseFloat(row.querySelector("td:nth-child(4) input").value.replace("", "")); // Ahora el precio de venta está en la cuarta columna
        totalCost += costValue;
        totalSale += saleValue;
    });

    // Llena los campos de costo y venta
    //document.getElementById("totalCost").value = "" + totalCost.toFixed(2);
    document.getElementById("totalSale").value = "" + totalSale.toFixed(2);

    // Activar la edición de los campos de costo y venta
    //document.getElementById("totalCost").removeAttribute("readonly");
    document.getElementById("totalSale").removeAttribute("readonly");

    // Muestra el modal
    document.getElementById("confirmSaleModal").classList.remove("hidden");

    // Evento para cerrar el modal al hacer clic en "Cancelar"
    document.getElementById("closeModal").addEventListener("click", function() {
        document.getElementById("confirmSaleModal").classList.add("hidden");
    });

    // Evento para "Confirmar"
    document.getElementById("confirmFinalSale").addEventListener("click", function() {
        // Aquí puedes agregar el código para enviar los datos al servidor o mostrar un mensaje de confirmación, por ejemplo:
        alert("Venta confirmada con éxito!");

        // Luego, cierra el modal
        document.getElementById("confirmSaleModal").classList.add("hidden");
    });

});



</script>
<script>
    document.addEventListener("DOMContentLoaded", () => {
        const productosGrid = document.getElementById("productosGrid");
        const tablaProductosSeleccionados = document.getElementById("tablaProductosSeleccionados");
        const contadorProductos = document.getElementById("contadorProductos");
        let count = 0;

        productosGrid.addEventListener("click", (e) => {
            if (e.target.tagName === "BUTTON") {
                const producto = e.target.closest(".producto");
                const idProducto = producto.getAttribute("data-idproducto"); // Obtenemos el ID del producto

                // Buscar si ya existe este producto en la tabla
                const existingRow = tablaProductosSeleccionados.querySelector(`[data-idproducto="${idProducto}"]`);
                if (existingRow) {
                    // Si ya existe, simplemente incrementa la cantidad
                    const quantityInput = existingRow.querySelector(".quantity-input");
                    quantityInput.value = parseInt(quantityInput.value) + 1;
                    // Actualiza el total
                    const priceInputValue = parseFloat(existingRow.querySelector(".price-input").value);
                    existingRow.querySelector(".total-cell").textContent = (parseInt(quantityInput.value) * priceInputValue).toFixed(2);
                } else {
                    // Si no existe, agrega una nueva fila
                    const nombreProducto = producto.querySelector("h3").textContent;
                    const precioProducto = producto.querySelector("p").textContent;
                    const imgSrc = producto.querySelector("img").src; // Obten la URL de la imagen

                    const newRow = document.createElement("tr");
                    newRow.setAttribute("data-idproducto", idProducto); // Establecemos el ID del producto en la fila
                    newRow.innerHTML = `
                        <td class="px-2 py-2"><img src="${imgSrc}" alt="${nombreProducto}" class="w-12 h-12 object-cover rounded-md"></td>
                        <td class="px-2 py-2">${nombreProducto}</td>
                        <td class="px-2 py-2"><input type="number" value="1" min="1" class="w-16 border rounded p-1 quantity-input"></td>
                        <td class="px-2 py-2"><input type="text" value="${precioProducto}" class="w-20 border rounded p-1 price-input"></td>
                        <td class="px-2 py-2 total-cell">${parseFloat(precioProducto).toFixed(2)}</td>
                        <td class="px-2 py-2"><button class="text-red-500 hover:text-red-700">Eliminar</button></td>
                    `;

                    tablaProductosSeleccionados.querySelector("tbody").appendChild(newRow);
                    count++;
                    contadorProductos.textContent = count;
                }
            }
        });
        // Evento de teclado para filtrar modelos en tiempo real
        document.getElementById("modeloInput").addEventListener("keyup", function() {
            const filtro = this.value.toLowerCase();
            const opciones = document.querySelectorAll("#modeloDropdown div");
            let count = 0; // Contador para mostrar solo las primeras coincidencias
            opciones.forEach(opcion => {
                if (opcion.textContent.toLowerCase().includes(filtro) && count < 10) { // Limitamos a 10 resultados para evitar que el dropdown se haga demasiado grande
                    opcion.style.display = "block";
                    count++;
                } else {
                    opcion.style.display = "none";
                }
            });
        });
    
    });
    function filtrarProductosPorModelo(idModelo) {
        const productos = document.querySelectorAll(".producto");
        productos.forEach(producto => {
            // Asume que en cada producto tienes un atributo 'data-idmodelo' que almacena el idModeloProducto
            if (producto.getAttribute("data-idmodelo") == idModelo) {
                producto.style.display = "block";
            } else {
                producto.style.display = "none";
            }
        });
    }

    function eliminarModelo() {
        const modeloSeleccionadoDiv = document.getElementById("modeloSeleccionado");
        modeloSeleccionadoDiv.classList.add("hidden");
        modeloSeleccionadoDiv.querySelector("span").textContent = "";
        document.getElementById("modeloInput").value = "";
        document.getElementById("modeloDropdown").style.display = "none";
    }

    // Dentro del evento que maneja la selección de un modelo en el dropdown:
    opcion.addEventListener("click", function() {
        document.getElementById("modeloInput").value = item.descripcion;
        const modeloSeleccionadoDiv = document.getElementById("modeloSeleccionado");
        modeloSeleccionadoDiv.querySelector("span").textContent = item.descripcion;
        modeloSeleccionadoDiv.classList.remove("hidden");
        modeloDropdown.style.display = "none";
    });

    // ... (resto del código de paginación)


    // Para la paginación y matriz de productos
    let currentPage = 1;
    const itemsPerPage = 8; // Ajusta según cuántos productos quieras por página

    function renderProductsPage(page) {
        // Aquí, deberías filtrar tus productos según la página y renderizarlos en #productosGrid
        // Por simplicidad, no lo estoy haciendo en este ejemplo, pero puedes usar slice() para obtener un subconjunto de productos y luego renderizarlos.
    }

    document.getElementById("prevPage").addEventListener("click", function() {
        if (currentPage > 1) {
            currentPage--;
            renderProductsPage(currentPage);
        }
    });

    document.getElementById("nextPage").addEventListener("click", function() {
        // Asume que tienes una variable totalProducts que contiene el total de productos
        if (currentPage < Math.ceil(totalProducts / itemsPerPage)) {
            currentPage++;
            renderProductsPage(currentPage);
        }
    });

    document.addEventListener("input", function(event) {
        if (event.target.matches(".quantity-input, .price-input")) {
            const row = event.target.closest("tr");
            const quantity = parseFloat(row.querySelector(".quantity-input").value);
            const price = parseFloat(row.querySelector(".price-input").value.replace("", ""));
            const totalCell = row.querySelector(".total-cell");

            totalCell.textContent = "S/." + (quantity * price).toFixed(2);
        }
    });

    // Renderiza la primera página al cargar
    renderProductsPage(1);
</script>
<script>
    document.addEventListener("DOMContentLoaded", () => {
    fetch("/Venta/GetTiposVenta")
        .then(response => response.json())
        .then(data => {
            const tipoVentaSelect = document.getElementById("tipoVenta");
            data.forEach(item => {
                const option = document.createElement("option");
                option.value = item.id;
                option.textContent = item.descripcion;
                tipoVentaSelect.appendChild(option);
            });
        });

    function filtrarProductosPorModelo(idModelo) {
        const productos = document.querySelectorAll(".producto");
        productos.forEach(producto => {
            if (producto.getAttribute("data-idmodelo") == idModelo) {
                producto.style.display = "block";
            } else {
                producto.style.display = "none";
            }
        });
    }

    // Llenar el combobox de modelos al cargar la página
    fetch("/Venta/GetModelos")
        .then(response => response.json())
        .then(data => {
            const modeloDropdown = document.getElementById("modeloDropdown");
            data.result.forEach(item => {
                const opcion = document.createElement("div");
                opcion.className = "p-2 hover:bg-gray-200 cursor-pointer";
                opcion.textContent = item.descripcion;
                opcion.addEventListener("click", function() {
                    document.getElementById("modeloInput").value = item.descripcion;
                    const modeloSeleccionadoDiv = document.getElementById("modeloSeleccionado");
                    modeloSeleccionadoDiv.querySelector("span").textContent = item.descripcion;
                    modeloSeleccionadoDiv.classList.remove("hidden");
                    modeloDropdown.style.display = "none";

                    // Filtra los productos según el modelo seleccionado
                    filtrarProductosPorModelo(item.id); 
                });
                modeloDropdown.appendChild(opcion);
            });
        });
    });


</script>
<script>
    document.getElementById("buscarProducto").addEventListener("input", function() {
    const searchTerm = this.value.toLowerCase();
    const productos = document.querySelectorAll(".producto");
    productos.forEach(producto => {
        const productoName = producto.querySelector("h3").textContent.toLowerCase();
        if (productoName.includes(searchTerm)) {
            producto.style.display = "block";
        } else {
            producto.style.display = "none";
        }
    });
});

</script>
<script>
    function filterModelos() {
    const searchTerm = document.getElementById("modeloInput").value.toLowerCase();
    const modelos = document.querySelectorAll(".modeloOption");
    modelos.forEach(modelo => {
        if (modelo.textContent.toLowerCase().includes(searchTerm)) {
            modelo.style.display = "block";
        } else {
            modelo.style.display = "none";
        }
    });
    }

    document.getElementById("modeloInput").addEventListener("focus", function() {
        document.getElementById("modeloDropdown").style.display = "block";
    });

    document.getElementById("modeloInput").addEventListener("blur", function() {
        setTimeout(() => {
            document.getElementById("modeloDropdown").style.display = "none";
        }, 200);
    });

    document.querySelectorAll(".modeloOption").forEach(modelo => {
        modelo.addEventListener("click", function() {
            document.getElementById("modeloInput").value = this.textContent;
        });
    });

</script>
<script>
    document.addEventListener("click", function(event) {
    const modeloInput = document.getElementById("modeloInput");
    const modeloDropdown = document.getElementById("modeloDropdown");

    // Verifica si el clic fue fuera de los elementos
    if (!modeloInput.contains(event.target) && !modeloDropdown.contains(event.target)) {
        modeloDropdown.style.display = "none";
        }
    });
</script>
<script>
    document.getElementById("modeloSeleccionado").addEventListener("click", function() {
        // 1. Limpiar el input del modelo
        document.getElementById("modeloInput").value = "";
    
        // 2. Ocultar el div del modelo seleccionado
        this.classList.add("hidden");

        // 3. Mostrar todos los productos
        const productos = document.querySelectorAll(".producto");
        productos.forEach(producto => {
            producto.style.display = "block";
        });
    });

</script>*@