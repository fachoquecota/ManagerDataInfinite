@model List<ProductoVenta>

@{
    ViewData["Title"] = "Ventas";
}

<div class="container mx-auto p-6">
    <h1 class="text-2xl font-semibold mb-4">Ventas</h1>

    <div class="flex flex-wrap -mx-2">
        <!-- Tarjeta de Lista de Productos -->
        <div class="w-full md:w-1/2 px-2 mb-4">
            <div class="p-4 bg-white rounded-lg shadow-md">
                <h2 class="text-xl font-semibold mb-4 text-blue-500">Lista de Productos</h2>
                <div class="filtro-container">
                  <!-- Búsqueda por nombre -->
                  <div class="relative mb-4 w-full inline-block">
                    <label for="buscarProducto" class="block text-sm font-medium text-gray-600">Buscar Producto:</label>
                    <input type="text" id="buscarProducto" name="buscarProducto" placeholder="Ingrese nombre del producto" class="mt-1 p-2 w-full rounded-md border shadow-sm">
                  </div>

                  <!-- Categoría -->
                  <div class="relative mb-4 w-1/4 inline-block">
                      <label for="categoriaCombobox" class="block text-sm font-medium text-gray-600">Categoría:</label>
                      <select id="categoriaCombobox" class="mt-1 p-2 rounded-md border border-green-300 shadow-sm w-full">
                          <option value="">Todas las Categorías</option>
                          @foreach(var categoria in ViewBag.Categoria)
                          {
                              <option value="@categoria.Value">@categoria.Text</option>
                          }                    
                      </select>
                  </div>


                  <!-- Calidad -->
                  <div class="relative mb-4 w-1/4 inline-block">
                    <label for="calidadCombobox" class="block text-sm font-medium text-gray-600">Calidad:</label>
                    <select id="calidadCombobox" class="mt-1 p-2 rounded-md border border-green-300 shadow-sm w-full">
                      <option value="">Todas las calidades</option>
                        @foreach(var calidad in ViewBag.Calidad)
                        {
                            <option value="@calidad.Value">@calidad.Text</option>
                        }                    </select>
                  </div>

                  <!-- Talla -->
                  <div class="relative mb-4 w-1/4 inline-block">
                    <label for="sizeCombobox" class="block text-sm font-medium text-gray-600">Talla:</label>
                    <select id="sizeCombobox" class="mt-1 p-2 rounded-md border border-green-300 shadow-sm w-full">
                      <option value="">Todas las tallas</option>
                       @foreach (var talla in ViewBag.Tallas as List<SelectListItem>)
                       {
                           <option value="@talla.Value">@talla.Text</option>
                       }                    </select>
                  </div>


                  

                  <!-- Color -->
                  <div class="relative mb-4 w-1/4 inline-block">
                    <label for="colorCombobox" class="block text-sm font-medium text-gray-600">Color:</label>
                    <select id="colorCombobox" class="mt-1 p-2 rounded-md border shadow-sm w-full">
                      <option value="">Todos los colores</option>
                        @foreach(var color in ViewBag.Colores)
                        {
                            <option value="@color.Value">@color.Text</option>
                        }                    </select>
                  </div>

                 

                  <!-- Marca -->
                  <div class="relative mb-4 w-1/4 inline-block">
                    <label for="marcaCombobox" class="block text-sm font-medium text-gray-600">Marca:</label>
                    <select id="marcaCombobox" class="mt-1 p-2 rounded-md border shadow-sm w-full">
                      <option value="">Todas las marcas</option>
                        @foreach(var marca in ViewBag.Marca)
                        {
                            <option value="@marca.Value">@marca.Text</option>
                        }                    </select>
                  </div>
                                   <!-- Modelo -->
                  <div class="relative mb-4 inline-block w-1/4">
                    <label for="modeloCombobox" class="block text-sm font-medium text-gray-600">Modelo:</label>
                    <select id="modeloCombobox" name="modelo" class="mt-1 p-2 rounded-md border shadow-sm w-full">
                      <option value="">Todos los modelos</option>
                        @foreach(var modelo in ViewBag.Modelos)
                        {
                            <option value="@modelo.Value">@modelo.Text</option>
                        }                    </select>
                  </div>
                </div>

                <!-- Matriz de Productos -->
                <div id="productosGrid" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 mb-4">
                    @foreach (var producto in Model)
                    {
                        var urlImagenCompleta = $"{producto.ImagenCarpeta}/{producto.ImagenNombre}"; // Combina imagenCarpeta e imagenNombre

                        <div class="producto bg-white p-3 rounded-lg shadow-md transition-transform transform hover:scale-105"
                             data-idproducto="@producto.IdProducto"
                             data-idsize="@producto.IdSize"
                             data-idcolor="@producto.IdColor"
                             data-idmodeloproducto="@producto.IdModeloProducto"
                             data-idCalidad="@producto.IdCalidad"
                             data-idMarca="@producto.IdMarca"
                             data-idCategoria="@producto.IdCategoria"
                             data-cantidad ="@producto.Cantidad">

                            <div class="relative mb-3">
                                <img src="@urlImagenCompleta" alt="@producto.Producto" class="w-24 h-24 object-cover rounded-md mx-auto">
                            </div>
                            <h3 class="text-center text-md mb-2">@producto.Producto</h3>
                            <!-- Inicio de la rejilla para detalles del producto -->
                                <div class="grid grid-cols-2 gap-2">
                                    <div>
                                        <strong>Marca:</strong>
                                        <p>@producto.Marca</p>
                                    </div>
                                    <div>
                                        <strong>Precio:</strong>
                                        <p class="precio-producto">@producto.Precio.ToString("0.00")</p>
                                    </div>
                                    <div>
                                        <strong>Cantidad:</strong>
                                        <p>@producto.Cantidad</p>
                                    </div>
                                    <div>
                                        <strong>Tamaño:</strong>
                                        <p>@producto.SizeDescription</p>
                                    </div>
                                    <div>
                                        <strong>Color:</strong>
                                        <p>@producto.ColorDescription</p>
                                    </div>
                                    <div>
                                        <strong>Modelo:</strong>
                                        <p>@producto.ModeloDescripcion</p>
                                    </div>
                                </div>
                            <button class="text-blue-500 hover:text-blue-700 block w-full py-1 px-3 border border-blue-500 rounded-md transition-colors hover:bg-blue-500 hover:text-white">Seleccionar</button>
                        </div>
                    }
                </div>



                <!-- Paginación -->
                <div class="flex justify-center mt-4">
                    <button id="prevPage" class="bg-blue-500 text-white px-4 py-2 rounded-l-md">Anterior</button>
                    <button id="nextPage" class="bg-blue-500 text-white px-4 py-2 rounded-r-md">Siguiente</button>
                </div>
            </div>
        </div>
        <!-- Tarjeta de Formulario -->
        <div class="w-full md:w-1/2 px-2 mb-4">
            <div class="p-4 bg-white rounded-lg shadow-md">
                <h2 class="text-xl font-semibold mb-4 text-blue-500">Detalles de la Venta</h2>

                <!-- Tipo de Venta -->
                <div class="mb-4">
                    <label for="tipoVenta" class="block text-sm font-medium text-gray-600">Tipo de Venta:</label>
                    <select id="tipoVenta" name="tipoVenta" class="mt-1 p-2 w-full rounded-md border shadow-sm"></select>
                </div>

                <!-- Selección de Cliente -->
                <div class="mb-4">
                    <label for="cliente" class="block text-sm font-medium text-gray-600">Seleccionar Cliente:</label>
                    <select id="cliente" name="cliente" class="mt-1 p-2 w-full rounded-md border shadow-sm">
                        <option>Cliente 1</option>
                        <option>Cliente 2</option>
                        <!-- Más clientes -->
                    </select>
                </div>

                <!-- Lista de Productos Seleccionados -->
                <div class="mb-4">
                    <h3 class="text-md font-medium text-gray-600">Productos Seleccionados: <span id="contadorProductos">0</span></h3>
                    <table id="tablaProductosSeleccionados" class="min-w-full divide-y divide-gray-200 text-center rounded-lg shadow-sm">
                        <thead class="bg-gray-100">
                            <tr>
                                <th class="px-2 py-2">Imagen</th>
                                <th class="px-2 py-2">Producto</th>
                                <th class="px-2 py-2">Cantidad</th>
                                <th class="px-2 py-2">Precio</th> <!-- Mantenemos la columna Precio -->
                                <th class="px-2 py-2">Total</th>
                                <th class="px-2 py-2">Acciones</th>
                            </tr>
                        </thead>

                        <tbody>
                            <!-- Productos Seleccionados serán añadidos aquí -->
                        </tbody>
                    </table>
                </div>

                <button type="submit" id="confirmSaleButton" class="px-4 py-2 bg-blue-500 text-white rounded-md">Confirmar Venta</button>
            </div>
        </div>



    </div>
</div>
<!-- Modal -->
<div class="fixed z-10 inset-0 overflow-y-auto hidden" aria-labelledby="modal-title" role="dialog" aria-modal="true" id="confirmSaleModal">
  <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
    <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" aria-hidden="true"></div>
    <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>

    <div class="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-2xl sm:w-full">
      <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
        <h3 class="text-lg leading-6 font-medium text-gray-900" id="modal-title">
          Confirmar Venta
        </h3>
        <div class="mt-2">
            <!-- Aquí irá la tabla con los productos seleccionados y los detalles -->
            <div id="modalTableContent">
                <!-- El contenido de la tabla se copiará aquí -->
            </div>

            <!-- Campo de venta -->
            <div class="mt-4">
                <label for="totalSale" class="block text-sm font-medium text-gray-600">Venta Total:</label>
                <input type="text" id="totalSale" class="mt-1 p-2 w-full rounded-md border shadow-sm" >
            </div>
        </div>
      </div>
      <div class="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
        <button type="button" class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-blue-600 text-base font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 sm:ml-3 sm:w-auto sm:text-sm" id="confirmFinalSale">
          Confirmar
        </button>
        <button type="button" class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm" id="closeModal">
          Cancelar
        </button>
      </div>
    </div>


  </div>
</div>
<script>
$(document).ready(function() {
    // Detectar cambios en los ComboBox
    $('#colorCombobox, #sizeCombobox, #modeloCombobox, #calidadCombobox, #marcaCombobox, #categoriaCombobox').on('input change', function() {
        filtrarProductos();
    });

    // Evento para la búsqueda de productos
    $("#buscarProducto").on("input", function() {
        resetComboboxes(); // Restablece los comboboxes
        buscarEnProductos(this.value); // Filtra los productos según la búsqueda
    });
});

function resetComboboxes() {
    $('#modeloCombobox').val('');  // Todos los modelos
    $('#sizeCombobox').val('');    // Todas las tallas
    $('#colorCombobox').val('');   // Todos los colores
    $('#calidadCombobox').val('');   // Todos los calidad
    $('#marcaCombobox').val('');   // Todos los marca
    $('#categoriaCombobox').val('');   // Todos los categoria


}

function filtrarProductos() {
    var colorSeleccionado = $('#colorCombobox').val();
    var tallaSeleccionada = $('#sizeCombobox').val();
    var modeloSeleccionado = $('#modeloCombobox').val();
    var calidadSeleccionado = $('#calidadCombobox').val();
    var marcaSeleccionado = $('#marcaCombobox').val();
    var categoriaSeleccionado = $('#categoriaCombobox').val();



    // Si todos los filtros están en la opción predeterminada o vacíos, mostramos todos los productos.
    if (!colorSeleccionado && !tallaSeleccionada && !modeloSeleccionado && !calidadSeleccionado && !marcaSeleccionado && !categoriaSeleccionado) {
        $('.producto').show();
        return;
    }

    // Oculta todos los productos primero
    $('.producto').hide();

    // Filtrar y mostrar productos en base a la selección
    $('.producto').each(function() {
        var colorProducto = $(this).data('idcolor');
        var categoriaProducto = $(this).data('idcategoria');
        var tallaProducto = $(this).data('idsize');
        var modeloProducto = $(this).data('idmodeloproducto').toString();
        var calidadProducto = $(this).data('idcalidad');
        var marcaProducto = $(this).data('idmarca');




        var coincideColor = !colorSeleccionado || colorProducto == colorSeleccionado;
        var coincideTalla = !tallaSeleccionada || tallaProducto == tallaSeleccionada;
        var coincideCalidad = !calidadSeleccionado || calidadProducto == calidadSeleccionado;
        var coincideMarca = !marcaSeleccionado || marcaProducto == marcaSeleccionado;
        var coincideCategoria = !categoriaSeleccionado || categoriaProducto == categoriaSeleccionado;
        var coincideModelo = !modeloSeleccionado || modeloProducto == modeloSeleccionado;

        if (coincideColor && coincideTalla && coincideModelo && coincideCalidad && coincideMarca && coincideCategoria) {
            $(this).show();
        }
    });
}

function buscarEnProductos(searchTerm) {
    searchTerm = searchTerm.toLowerCase();
    $('.producto').each(function() {
        const productoName = $(this).find("h3").text().toLowerCase();
        const productoMarca = $(this).find("p:nth-child(4)").text().toLowerCase();
        const productoModelo = $(this).find("p:nth-child(7)").text().toLowerCase();

        if (productoName.includes(searchTerm) || productoMarca.includes(searchTerm) || productoModelo.includes(searchTerm)) {
            $(this).show();
        } else {
            $(this).hide();
        }
    });
}
</script>

<script>
    // Función para recalcular el total de un producto
    function recalculateProductTotal(row) {
        const quantity = parseFloat(row.querySelector('.quantity-input').value);
        const price = parseFloat(row.querySelector('.price-input').value);
        const totalCell = row.querySelector('.total-cell');
        totalCell.textContent = (quantity * price).toFixed(2);
    }

    // Función para recalcular la "Venta Total"
    function recalculateSaleTotal() {
        const table = document.querySelector("#tablaProductosSeleccionados");
        let totalColumnIndex = -1;

        // Encontrar el índice de la columna "Total"
        table.querySelectorAll('thead th').forEach((th, index) => {
            if (th.textContent.trim() === 'Total') {
                totalColumnIndex = index;
            }
        });

        // Si no encontramos la columna, terminamos la función
        if (totalColumnIndex === -1) return;

        // Calcular el total sumando los valores de la columna "Total" en cada fila
        let total = 0;
        table.querySelectorAll('tbody tr').forEach(row => {
            const totalCell = row.querySelector(`td:nth-child(${totalColumnIndex + 1})`);
            if (totalCell) {
                total += parseFloat(totalCell.textContent.trim() || 0);
            }
        });

        // Establecer el valor del total en el campo correspondiente
        document.getElementById("totalSale").value = total.toFixed(2);
    }


    document.addEventListener("DOMContentLoaded", () => {


    /* Función para agregar productos a "Detalles de venta" */
    function agregarProductoADetalles(producto) {
    const tablaProductosSeleccionados = document.getElementById("tablaProductosSeleccionados");
    const idProducto = producto.getAttribute("data-idproducto");
    const existingRow = tablaProductosSeleccionados.querySelector(`[data-idproducto="${idProducto}"]`);

    if (existingRow) {
        const quantityInput = existingRow.querySelector(".quantity-input");
        const maxQuantity = parseInt(producto.getAttribute("data-cantidad"));
        console.log("maxQuantity ",maxQuantity);
        if (parseInt(quantityInput.value) < maxQuantity) {
            quantityInput.value = parseInt(quantityInput.value) + 1;
            recalculateProductTotal(existingRow);
            recalculateSaleTotal();
        } else {
            alert("No puedes agregar más unidades de este producto. Has alcanzado la cantidad máxima permitida.");
        }
    } else {
        const nombreProducto = producto.querySelector("h3").textContent;
        const precioProductoTexto = producto.querySelector(".precio-producto").textContent;
@*        const cantidadMaxima = parseInt(producto.querySelector("p:nth-child(5)").textContent);
*@        
        const cantidadMaxima = parseInt(producto.getAttribute("data-cantidad"));

        console.log("cantidad máxima ", cantidadMaxima);
        const imgSrc = producto.querySelector("img").src;

        const newRow = document.createElement("tr");
        newRow.setAttribute("data-idproducto", idProducto);
        newRow.innerHTML = `
            <td class="px-2 py-2"><img src="${imgSrc}" alt="${nombreProducto}" class="w-12 h-12 object-cover rounded-md"></td>
            <td class="px-2 py-2">${nombreProducto}</td>
            <td class="px-2 py-2">
                <input type="number" value="1" min="1" max="${cantidadMaxima}" data-max="${cantidadMaxima}" class="w-16 border rounded p-1 quantity-input">
            </td>
            <td class="px-2 py-2">
                <input type="number" value="${parseFloat(precioProductoTexto).toFixed(2)}" class="w-20 border rounded p-1 price-input precio-producto" readonly>
            </td>
            <td class="px-2 py-2 total-cell">${parseFloat(precioProductoTexto).toFixed(2)}</td>
            <td class="px-2 py-2"><button class="text-red-500 hover:text-red-700">Eliminar</button></td>
        `;

        newRow.querySelector('.quantity-input').addEventListener('input', function(e) {
            let max = parseInt(this.getAttribute('data-max'));
            if (parseInt(this.value) > max) {
                alert("La cantidad ingresada supera la cantidad disponible.");
                this.value = max;
            } else if (this.value < 1) {
                alert("La cantidad ingresada es menor que la cantidad mínima permitida.");
                this.value = 1;
            }

            // Recalcula el total cada vez que cambia el valor.
            const precioInput = newRow.querySelector('.price-input');
            const totalCell = newRow.querySelector('.total-cell');
            totalCell.textContent = (this.value * parseFloat(precioInput.value)).toFixed(2);
            recalculateSaleTotal();
        });

        tablaProductosSeleccionados.querySelector("tbody").appendChild(newRow);
    }
}

    /* Evento para el botón de agregar producto */
    document.getElementById("productosGrid").addEventListener("click", (e) => {
        if (e.target.tagName === "BUTTON") {
            const producto = e.target.closest(".producto");
            agregarProductoADetalles(producto);
        }
    });
    /* Funciones */
    function filtrarProductosPorModelo(idModelo) {
        const productos = document.querySelectorAll(".producto");
        productos.forEach(producto => {
            if (producto.getAttribute("data-idmodelo") == idModelo) {
                producto.style.display = "block";
            } else {
                producto.style.display = "none";
            }
        });
    }

    function mostrarTodosLosProductos() {
        const productos = document.querySelectorAll(".producto");
        productos.forEach(producto => {
            producto.style.display = "block";
        });
    }

   /* Evento para el botón de confirmación de venta */
document.getElementById("confirmSaleButton").addEventListener("click", function(event) {
    event.preventDefault();
    
    // Antes de clonar la tabla, calcula el total de venta.
    recalculateSaleTotal();
    const totalVenta = parseFloat(document.getElementById("totalSale").value);

    // Copia el contenido de la tabla de productos seleccionados
    const selectedProductsTable = document.getElementById("tablaProductosSeleccionados").cloneNode(true);

    // Elimina la columna de "Acción" de la tabla copiada
    selectedProductsTable.querySelectorAll("thead tr th:last-child, tbody tr td:last-child").forEach(cell => cell.remove());

    // Desactiva los campos de entrada de la tabla copiada
    selectedProductsTable.querySelectorAll("input").forEach(input => input.disabled = true);

    // Pega el contenido en el modal
    const modalTableContent = document.getElementById("modalTableContent");
    modalTableContent.innerHTML = '';
    modalTableContent.appendChild(selectedProductsTable);

    // Usa el total calculado para establecer el valor en el modal.
    document.getElementById("totalSale").value = totalVenta.toFixed(2);

    // Muestra el modal
    document.getElementById("confirmSaleModal").classList.remove("hidden");

    // Evento para cerrar el modal al hacer clic en "Cancelar"
    document.getElementById("closeModal").addEventListener("click", function() {
        document.getElementById("confirmSaleModal").classList.add("hidden");
    });

    // Evento para "Confirmar"
    document.getElementById("confirmFinalSale").addEventListener("click", function(event) {
        event.preventDefault();

        const rows = document.getElementById("tablaProductosSeleccionados").querySelectorAll("tbody tr");

        const dataToSend = {
            productos: [],
            ventaTotal: parseFloat(document.getElementById("totalSale").value)
        };

        rows.forEach((row, index) => {
            const idProducto = parseInt(row.getAttribute("data-idproducto"), 10);
            const cantidad = parseInt(row.querySelector(".quantity-input").value, 10);
            const precio = parseFloat(row.querySelector(".price-input").value);
            const total = parseFloat(row.querySelector(".total-cell").textContent);

            dataToSend.productos.push({
                id: idProducto,
                cantidad: cantidad,
                precio: precio,
                total: total
            });
        });

        fetch('/Venta/GuardarVenta', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(dataToSend)
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Respuesta del servidor no es OK');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // Puedes mostrar un mensaje de éxito o hacer alguna otra acción
                alert('Venta guardada con éxito');
                document.getElementById("confirmSaleModal").classList.add("hidden");
            } else {
                alert('Hubo un error al guardar la venta: ' + (data.message || ''));
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('Hubo un error al procesar la solicitud.');
        });
    });
});

    /* Llenar el dropdown de tipos de venta al cargar la página */
    fetch("/Venta/GetTiposVenta")
        .then(response => response.json())
        .then(data => {
            const tipoVentaSelect = document.getElementById("tipoVenta");
            data.forEach(item => {
                const option = document.createElement("option");
                option.value = item.id;
                option.textContent = item.descripcion;
                tipoVentaSelect.appendChild(option);
            });
        });

        // Manejador de eventos para el botón "Eliminar"
    tablaProductosSeleccionados.addEventListener("click", function(e) {
        if (e.target && e.target.matches("button.text-red-500")) {
            const filaProducto = e.target.closest("tr");
            filaProducto.remove();  // Elimina la fila

            // Si tienes un contador, disminuye el contador en 1
            contadorProductos.textContent = count;
        }
    });
});

</script>