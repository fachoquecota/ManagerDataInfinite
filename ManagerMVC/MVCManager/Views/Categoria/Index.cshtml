@model List<CategoriaModel>

@{
    ViewBag.Title = "Mantenimiento de Categorías";
}

<div class="container mx-auto mt-10 p-5 max-w-2xl">
    <div class="p-6 bg-white shadow-md rounded-md">
        <h2 class="text-2xl font-bold mb-5">Mantenimiento de Categorías</h2>

        <div class="mb-4 w-1/2">
            <input type="text" id="searchInput" placeholder="Buscar..." class="p-2 border rounded shadow appearance-none focus:outline-none focus:shadow-outline">
        </div>

        <div class="mb-4">
            <button onclick="openAddModal()" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">Agregar Categoría</button>
        </div>

        <table class="min-w-full bg-white" id="categoriasTable">
            <thead>
                <tr>
                    <th class="py-2 px-4 border-b border-gray-200 bg-gray-100">ID</th>
                    <th class="py-2 px-4 border-b border-gray-200 bg-gray-100">Descripción</th>
                    <th class="py-2 px-4 border-b border-gray-200 bg-gray-100">Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var categoria in Model)
                {
                    <tr data-idCategoria="@categoria.idCategoria">
                        <td class="py-2 px-4 border-b border-gray-200">@categoria.idCategoria</td>
                        <td class="py-2 px-4 border-b border-gray-200">@categoria.descripcion</td>
                        <td class="py-2 px-4 border-b border-gray-200">
                            <button onclick="openEditModal('@categoria.idCategoria', '@Html.Raw(categoria.descripcion.Replace("'", "\\'"))')" class="bg-yellow-500 hover:bg-yellow-600 text-white font-bold py-1 px-4 rounded mr-2">Editar</button>
                            <button class="text-red-500 hover:text-red-700" onclick="openDeleteModal(@categoria.idCategoria)">Eliminar</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<div class="fixed z-10 inset-0 overflow-y-auto hidden" aria-labelledby="modal-title" role="dialog" aria-modal="true" id="editModal">
    <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
        <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" aria-hidden="true"></div>
        <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
        <div class="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
            <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                <h3 class="text-lg leading-6 font-medium text-gray-900" id="modal-title">Editar/Agregar Categoría</h3>
                <div class="mt-2">
                    <input type="text" id="descripcionInput" class="shadow appearance-none border rounded w-full py-2 px-3 leading-tight focus:outline-none focus:shadow-outline" placeholder="Descripción">
                </div>
            </div>
            <div class="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                <button onclick="saveChanges()" class="bg-green-500 hover:bg-green-600 text-white font-bold py-1 px-4 rounded">Guardar</button>
                <button type="button" onclick="closeModal()" class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:ml-3">Cancelar</button>
            </div>
        </div>
    </div>
</div>
<div class="fixed z-10 inset-0 overflow-y-auto hidden" aria-labelledby="modal-title-delete" role="dialog" aria-modal="true" id="deleteModal">
    <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
        <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" aria-hidden="true"></div>
        <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
        <div class="inline-block align-bottom bg-white rounded-lg px-4 pt-5 pb-4 text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full sm:p-6">
            <h3 class="text-lg leading-6 font-medium text-gray-900" id="modal-title-delete">Confirmar Eliminación</h3>
            <div class="mt-2">
                <p class="text-sm text-gray-500" id="deleteConfirmationText">¿Está seguro de que desea eliminar esta categoría? Esta acción no se puede deshacer.</p>
            </div>
            <div class="mt-5 sm:mt-6">
                <button type="button" onclick="confirmDelete()" class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-red-600 text-base font-medium text-white hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500">Confirmar</button>
                <button type="button" onclick="closeDeleteModal()" class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:ml-3">Cancelar</button>
            </div>
        </div>
    </div>
</div>

<script>
    let currentEditingId = null;
let modalMode = ""; // Puede ser "add" o "edit"
let idToDelete = 0;

function openEditModal(idCategoria, descripcion) {
    currentEditingId = idCategoria;
    document.getElementById("descripcionInput").value = descripcion;
    document.getElementById("modal-title").textContent = "Editar Categoría - ID: " + idCategoria;
    document.getElementById("editModal").classList.remove("hidden");
    modalMode = "edit";
}

function openAddModal() {
    document.getElementById("descripcionInput").value = "";
    document.getElementById("modal-title").textContent = "Agregar Nueva Categoría";
    document.getElementById("editModal").classList.remove("hidden");
    modalMode = "add";
    currentEditingId = null;
}

function closeModal() {
    document.getElementById("editModal").classList.add("hidden");
    currentEditingId = null;
    modalMode = "";
}

function saveChanges() {
    const descripcion = document.getElementById("descripcionInput").value;
    if (modalMode === "add") {
        fetch(`/Categoria/InsertCategoria?descripcion=${encodeURIComponent(descripcion)}`, { method: "POST" })
        .then(handleResponse);
    } else if (modalMode === "edit") {
        fetch(`/Categoria/UpdateCategoria?idCategoria=${currentEditingId}&descripcion=${encodeURIComponent(descripcion)}`, { method: "PUT" })
        .then(handleResponse);
    }
}

function openDeleteModal(idCategoria) {
    idToDelete = idCategoria;
    document.getElementById("deleteConfirmationText").textContent = "¿Está seguro de que desea eliminar la categoría con ID: " + idCategoria + "?";
    document.getElementById("deleteModal").classList.remove("hidden");
}

function closeDeleteModal() {
    document.getElementById("deleteModal").classList.add("hidden");
    idToDelete = 0;
}

function confirmDelete() {
    if (idToDelete) {
        fetch(`/Categoria/DeleteCategoria?idCategoria=${idToDelete}`, { method: "DELETE" })
        .then(handleResponse);
    }
}

function handleResponse(response) {
    if (response.ok) {
        alert("Operación realizada con éxito.");
        location.reload();
    } else {
        alert("Se produjo un error.");
    }
}

    document.getElementById('searchInput').addEventListener('keyup', function () {
        let filter = this.value.toUpperCase();
        let rows = document.querySelector("table tbody").rows;

        for (let i = 0; i < rows.length; i++) {
            let cells = rows[i].querySelectorAll("td");
            let foundInRow = false;

            // Columnas para buscar: nombres (1), apellidos (2), numeroDocumento (4), razon social (5), correo (7)
            let searchColumns = [1];

            for (let j = 0; j < searchColumns.length; j++) {
                let colIndex = searchColumns[j];
                let col = cells[colIndex];
                if (col) {
                    let txtValue = col.textContent || col.innerText;
                    if (txtValue.toUpperCase().indexOf(filter) > -1) {
                        foundInRow = true;
                        break; // Si encuentra coincidencia, no necesita buscar en las demás columnas
                    }
                }
            }

            rows[i].style.display = foundInRow ? "" : "none";
        }
    });

</script>